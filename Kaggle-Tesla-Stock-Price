{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport seaborn as sns \nimport matplotlib.pyplot as plt \nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score,roc_auc_score\nfrom sklearn.model_selection import GridSearchCV, cross_validate\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler\nimport warnings\nwarnings.simplefilter(action=\"ignore\")\n\n#detailed view\n\npd.set_option('display.max_columns', None)\npd.set_option('display.width', None)\npd.set_option('display.max_rows', 20)\npd.set_option('display.float_format', lambda x: '%.3f' % x)\n\n# Load the dataset\ndata = pd.read_csv(\"/kaggle/input/tesla-stock-price-prediction-dataset/TESLA.csv\")\n\n# Display the first few rows of the dataset\ndf = data.copy()\ndf.head()\ndf.dtypes\ndf.isnull().sum()\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-09-28T20:13:36.519494Z","iopub.execute_input":"2023-09-28T20:13:36.519903Z","iopub.status.idle":"2023-09-28T20:13:36.536918Z","shell.execute_reply.started":"2023-09-28T20:13:36.519869Z","shell.execute_reply":"2023-09-28T20:13:36.535635Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"Date         0\nOpen         0\nHigh         0\nLow          0\nClose        0\nAdj Close    0\nVolume       0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"#EDA(EXPLORATORY DATA ANALYSIS)\ndef check_df(dataframe, head=5):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head(head))\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(head))\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n   \ncheck_df(df)\n","metadata":{"execution":{"iopub.status.busy":"2023-09-28T20:14:58.385474Z","iopub.execute_input":"2023-09-28T20:14:58.385861Z","iopub.status.idle":"2023-09-28T20:14:58.399374Z","shell.execute_reply.started":"2023-09-28T20:14:58.385831Z","shell.execute_reply":"2023-09-28T20:14:58.398329Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"##################### Shape #####################\n(253, 7)\n##################### Types #####################\nDate          object\nOpen         float64\nHigh         float64\nLow          float64\nClose        float64\nAdj Close    float64\nVolume         int64\ndtype: object\n##################### Head #####################\n         Date    Open    High     Low   Close  Adj Close    Volume\n0  2021-09-29 259.933 264.500 256.893 260.437    260.437  62828700\n1  2021-09-30 260.333 263.043 258.333 258.493    258.493  53868000\n2  2021-10-01 259.467 260.260 254.530 258.407    258.407  51094200\n3  2021-10-04 265.500 268.990 258.707 260.510    260.510  91449900\n4  2021-10-05 261.600 265.770 258.067 260.197    260.197  55297800\n##################### Tail #####################\n           Date    Open    High     Low   Close  Adj Close    Volume\n248  2022-09-23 283.090 284.500 272.820 275.330    275.330  63615400\n249  2022-09-26 271.830 284.090 270.310 276.010    276.010  58076900\n250  2022-09-27 283.840 288.670 277.510 282.940    282.940  61925200\n251  2022-09-28 283.080 289.000 277.570 287.810    287.810  54664800\n252  2022-09-29 282.760 283.650 265.780 268.210    268.210  77393100\n##################### NA #####################\nDate         0\nOpen         0\nHigh         0\nLow          0\nClose        0\nAdj Close    0\nVolume       0\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"df.head()\ndf.info()\n","metadata":{"execution":{"iopub.status.busy":"2023-09-28T20:15:23.754427Z","iopub.execute_input":"2023-09-28T20:15:23.755495Z","iopub.status.idle":"2023-09-28T20:15:23.778016Z","shell.execute_reply.started":"2023-09-28T20:15:23.755458Z","shell.execute_reply":"2023-09-28T20:15:23.776836Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 253 entries, 0 to 252\nData columns (total 7 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   Date       253 non-null    object \n 1   Open       253 non-null    float64\n 2   High       253 non-null    float64\n 3   Low        253 non-null    float64\n 4   Close      253 non-null    float64\n 5   Adj Close  253 non-null    float64\n 6   Volume     253 non-null    int64  \ndtypes: float64(5), int64(1), object(1)\nmemory usage: 14.0+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}